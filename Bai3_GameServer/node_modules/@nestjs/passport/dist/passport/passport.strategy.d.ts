import { Type, WithoutCallback } from '../interfaces';
declare abstract class PassportStrategyMixin<TValidationResult> {
    abstract validate(...args: any[]): TValidationResult | Promise<TValidationResult>;
}
export declare function PassportStrategy<T extends Type<any> = any, TUser = unknown, TValidationResult = TUser | false | null>(Strategy: T, name?: string, callbackArity?: true | number): {
    new (...args: WithoutCallback<ConstructorParameters<T>>): InstanceType<T> & PassportStrategyMixin<TValidationResult>;
};
export {};
